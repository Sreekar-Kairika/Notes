Call Apply Bind Closures

Functions:: 


function myFunction(a, b) {
  return a * b;
}

Function Hoisting::
Hoisting is JavaScript's default behavior of moving declarations to the 
top of the current scope.

myFunction(5);
function myFunction(y) {
  return y * y;
}


SelfInvoking Functions::
A self-invoking expression is invoked (started) automatically, 
without being called.
( function () {
    let x = "Hello!!";  // I will invoke myself
                 }
) ();

--------------------------

CALL METHOD 

Using call we do function Borrowing 

Borrow function from other Objects and use with other objects.

Ex:
let name = {
    firstName : "sreekar",
    lastName : "kairika",
    printFullName: function(){
        console.log(this.firstName+ " "+ this.lastName);
    }
}
name.printFullName();
// oP : sreekar kairika 

let name3 = {
    firstName : "alxender",
    lastName : "rybck",
}
name.printFullName.call(name3);
// alexander ryback 


We can aslo Pass Arguments to the call method 

printFullName: function(state){
        console.log(this.firstName+ " "+ this.lastName+" "+this.state);
    }
	
printFullName.call(name3,"usa");

--------------------

Apply :: 

It is same as CALL but we pass Arguments in different way 

printFullName.apply(name3,["mumbai"]);
// In APPLY we pass Argumnets in a ARRAY

------------------

BIND :: 

Its Binds the Object to method

It returns a function which can be called later

We can Invoke it when required.

let printMyname = printFullName.bind(name2,"Mumbai");


let myName = name.printFullName.bind(name3);
console.log(myName);
myName();


-----------------------------------

CLOSURES 

Function bundled together with its lexical Scope is called as CLOSURES

Function Inside a function

Inner functions have access to outer variables .

Function with its Lexical Scope forms a Closure.

You can return a function from Closure. 

We can return a Function in JS

Closure :Function bundled with its lexical environment is known as a closure. 
Whenever function is returned, even if its vanished in execution context 
but still it remembers the reference it was pointing to. 
Its not just that function alone it returns but the entire closure and that's where 
it becomes interesting

---------------------------

SetTime Out ::
Its Asynchronous 

we pass a function and time 

function x(){
    var i =1;

    setTimeout( function() {
        console.log(1);
    },3000);
    console.log("Hello")
}

x();

-------------------------

FirstClass Functions 

//Function Statement 
function a(){
    console.log("a called");
}

// Function Expression 
var b = function(){
    console.log("b is called");
}

** Hoisting is Possible only for Function Statement and Not Expression 


Anonymous Function:: No name 

Anonymous fubctions are used where functions act like values 


-----------------------------

FIRST CLASS FUNCTIONS 

Ability to 

First class Functions / first class citizens : 
1) used as values
2) can be passed as argument
3) can be executed inside a closured function
4) can be taken as return


----------------------------

CALLBACKS 

A callback is a function passed as an argument to another function.

JavaScript is a Synchrouns language single threaded it can do a 
singular work at particular time in order.


JavaScript is synchronous. This means that it will execute your 
code block by order after hoisting.


By using Callbacks we do Async things in JavaSCript.

JavaScript has a Single Stack 

setTimeout is an Async Function 


--------------------------

EventLoop 

JS is Single Threaded

We have a Global Exection stack it goes to CALL STACK 

Call Stack is inside JS Engine and Engine is in Browser


WEB APIS -- setTimeout, DOM  API , fetch() , localStorage,Console
They belong to Browser  not  JavaScript 


CALLBACK Queue::  settime out after timer expire it goes to 
Callback queue  and EventLOOP checks if something is presnt 
in queue and push it to CALLSTACK.

EVENTLOOP job is to Monitor CallbackQueue & CallStack 
If stack if Empty Then only EVENTLOOP push things to Stack from Queue 


Only Asynch goes through this process and 
map reduce filter does not go to it 

Callabck is attached with Event , may be click or setTimeout or any.

MICROTASK QUEUE : It has high priority
Fetch goest to Microstack Queue 
All Promieses &Mutation Objects  go through MICROTASK QUEUE 



------------------------------

Promises 
A JavaScript Promise object can be:
1)Pending
2)Fulfilled
3)Rejected


function x() {
    return new Promise(function (resolve, reject) {
        setTimeout(() => { 
            const error = true;
            if(!error){
                console.log(`Your Promise has resolved`);
                resolve();
            }
            else{
                console.log(`Your Promise has  not been resolved`);
                reject(`Not satisfied`);
            }

        },2000);
    })

}

x().then(function(){
    console.log(`Thanks for resolving-sreekar`)
}).catch(function(err){
    console.log(`Very bad -sreekar  `+err)

})

// Then Elements are Resolve and Catch functions are reject.
then resolve 
To remove Callbacks we use Promises .

Promises Solve Callback Hell.

-------------------------------------

Async/Await

"async and await make promises easier to write"

async makes a function return a Promise

await makes a function wait for a Promise


to handle error we use TRY-CATCH block 

------------------------

Fetch 