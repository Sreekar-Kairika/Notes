
Can use JavaScript in 3 ways
1)In header
2)In body
3)In external file

<script src="/js/myScript.js"></script>
Linking File 

-----

Output

JavaScript can "display" data in different ways:

Writing into an HTML element, using innerHTML.
Writing into the HTML output using document.write().
Writing into an alert box, using window.alert().
Writing into the browser console, using console.log().

-----------

Statements

var let const

if switch for 

function return try 

----------------

4 ways to declare a JS variables

1)var
2)let
3)const
4) nothing 

The var keyword is used in all JavaScript code from 1995 to 2015.
The let and const keywords were added to JavaScript in 2015.

Variables are containers to hold values 


let name;
// value is UNDEFINED now 
//name = UNDEFINED now 


If you re-declare a JavaScript variable declared with var, it will not lose its value.
var carName = "Volvo";
var carName;

Idenfiter can Contain $
namee$ is valid 

UnderScore can be used 

-----------------------

LET

Variables defined with let cannot be Redeclared.
Variables defined with let must be Declared before use.
Variables defined with let have Block Scope

HOISTING is possible with var keyword , but not with let keyword 
Variables defined with var are hoisted to the top and can be initialized at any time.

Variables defined with LET are also hoisted to the top, but not initialized.
So we get Reference error.

---------------------------------

Const 

It has block scope.
Reassigning an existing const variable, in the same scope, is not allowed.

Variables defined with const are also hoisted to the top, but not initialized.
So we get Reference error.


Variables defined with const cannot be Redeclared.
Variables defined with const cannot be Reassigned.
Variables defined with const have Block Scope.

It does not define a constant value. It defines a constant reference to a value.


EX:

const cars = ["Saab", "Volvo", "BMW"];
cars[0] = "Toyota";
cars.push("Audi");

You can change Elements but you cannot reassign it.

const cars = ["Saab", "Volvo", "BMW"];
cars = ["Toyota", "Volvo", "Audi"]; 

---------------------------

Operators

let x = 5 + 5;
let y = "5" + 5;
let z = "Hello" + 5;

o/p:
10
55
Hello5


typeof()
instanceof()


== equal to
=== equal value and equal type 

!= not equal 
!== not equal value or not equal type 

------------------

Arithmetic Operators

+ - * /
% ** 
++ --



Precedence -- LEFT to Right

--------------------

Data Types 

let length = 16;                               // Number
let lastName = "Johnson";                      // String
let x = {firstName:"John", lastName:"Doe"};    // Object


let x = 16 + 4 + "Volvo";
o/p : 20Volvo

let x = "Volvo" + 26 + 4;

o/p : Volvo264

JavaScript has dynamic types. This means that the same variable can be used to hold different data types

BOOLEAN
let x=3
y=3
z=4

(x==y) return true
(x==z) return false 

ARRAYS:
const toys = []
const cars = ["Saab", "Volvo", "BMW"];

OBJECTS:
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

UNDEFINED 

let car;
// value undefined , type is undefined 

-----------------------

Functions 

Function is a block of code designed to perform a particular task.

function mul(p1,p2){
	return p1*p2;
}

-----------------------------

Objects

JavaScript variables are containers for data values.

Objects are varaiables too but contain many values 

Ex:
const car = {type:"Fiat", model:"500", color:"white"};

Mostly objects are declared with const
Objects have key-value pairs.

ACCESSING:
car.type;
car["type"]


THIS keyword 

In an object method, this refers to the object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.


x = new String();       
y = new Number();        
z = new Boolean();      

This can be declared but it slows down our code 


----------------------------------

Events

JavaScript lets you execute code when events are detected.

Here are some examples of HTML events:
An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked

COMMON HTML EVENTS

onchange
onclick
onmouseover
onmouseout
onload 

onkeydown

------------------------

Strings 

JavaScript strings are for storing and manipulating text.
A JavaScript string is zero or more characters written inside quotes

let carName1 = "Volvo XC60";  // Double quotes
let carName2 = 'Volvo XC60';  // Single quotes


carName1.length // gives string length


STRINGS ARE PRIMITIVE DATA TYPES but also can be defined as Objects 
let x = "John"
let y = new String("John");

x==y // true
x===y // false 


Comparing two Objects Always return FALSE
let x = new String("John");
let y = new String("John");
X==Y false
X===Y false 


There are 3 methods for extracting a part of a string:

slice(start, end)
substring(start, end)
substr(start, length)

txt.replace("apple","APPLE")
//changed to capitals

txt.toUpperCase();
txt.toLowerCase();

txt1= "hello"
txt2 = "world"

text = "Hello" + " " + "World!";
text = "Hello".concat(" ", "World!");


txt.trim()
The trim() method removes whitespace from both sides of a string:

txt="Apple"
let char = txt.charAt(0)
//A
let char = txt.charCodeAt(0)
// gives ascii value 65

txt[0]
//A 

split
txt.split("")
txt.split(" ")

indexOf
search 
startsWith
endsWith


------------------------

Template Literals
Template Literals use back-ticks (``) rather than the quotes ("") to define a string

let firstName = "John";
let lastName = "Doe";

let text = `Welcome ${firstName}, ${lastName}!`;
Automatic replacing of variables with real values is called string interpolation.


let price = 10;
let VAT = 0.25;

let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;

-----------------------------

NUMBERS

let x = 10;
let y = 20;
let z = "30";
let result = x + y + z;
o/p: 3030

JavaScript will try to convert strings to numbers in all numeric operations:
let x = "100";
let y = "10";
let z = x / y;

o/p : 10 

x-y 90
x*y 1000
// as + is concatenation
x+y 10010



The toString() method returns a number as a string.
x=123
x.toString();


let x = 9.656;
x.toFixed(0); 9
x.toFixed(2); 9.66
x.toFixed(6); 9.656000


There are 3 JavaScript methods that can be used to convert variables to numbers:

The Number() method
The parseInt() method
The parseFloat() method


NUMBER
Number(true);
Number(false);
Number("10");
Number("  10");


The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:
Number(new Date("1970-01-02"))

If spaces then FIRST number is only returned 

parseInt()
parseInt("-10");
parseInt("-10.33");
parseInt("10");
parseInt("10.33");

parseFloat("10");
parseFloat("10.33");
parseFloat("10 20 30");

---------------------------

Arrays

An array is a special variable, which can hold more than one value:

const cars = ["Saab", "Volvo", "BMW"];


const cars = [];
cars[0]= "Saab";
cars[1]= "Volvo";
cars[2]= "BMW";

const cars = new Array("Saab", "Volvo", "BMW");

Arrays are a special type of objects. The typeof operator in JavaScript returns "object" for arrays.


**
In JavaScript, arrays use numbered indexes.  
In JavaScript, objects use named indexes.
**


METHODS

push
pop

arr.shift() // removes first elemenst from array and shits other to left

arr.unshift("Apple")
The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:

delete arr[0];

Merge TWO ARRAYS

children = boys.concat(girls)

slice();


SORT()

arr.sort() // sorts in Alphabetic Order
arr.reverse()

NO IN BUILT MAX OR MIN FUNCTIONS IN ARRAY 


APPLY 
Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3).

Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3).


Arrays are not Const , but they cannot be reassigned but Manipulated.

--------------------------

Dates 

Date objects are created with the new Date() constructor.

const d  = new Date()

There are 4 ways to create a new date object:
new Date()
new Date(year, month, day, hours, minutes, seconds, milliseconds)
new Date(milliseconds)
new Date(date string)

-----------------------------

MATH 

The JavaScript Math object allows you to perform mathematical tasks on numbers.

Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2


Math.round(x)	Returns x rounded to its nearest integer
Math.ceil(x)	Returns x rounded up to its nearest integer
Math.floor(x)	Returns x rounded down to its nearest integer
Math.trunc(x)	Returns the integer part of x (new in ES6)


RANDOM 

Math.floor(Math.random() * 10);
// between 0 to 9
values ranges from 0 to 0.9 

-----------------------

Boolean 

 JavaScript Boolean represents one of two values: true or false.
 
 ---------------------------
 
 Conditions 
 
 if , else , else if   , switch 
 
 switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

----------------------

JavaScript supports different kinds of loops:

for - loops through a block of code a number of times
for/in - loops through the properties of an object
for/of - loops through the values of an iterable object
while - loops through a block of code while a specified condition is true
do/while - also loops through a block of code while a specified condition is true


-------------------

IN LOOP  through properties 

const person = {fname:"John", lname:"Doe", age:25};

let text = "";
for (let x in person) {
  text += person[x];
}
o/p : John Doe 25 

--------------------------

FOR OF The JavaScript for of statement loops through the values of an iterable object.

const cars = ["BMW", "Volvo", "Mini"];

let text = "";
for (let x of cars) {
  text += x + "<br>";
}

--------------------

While
while (i < 10) {
  text += "The number is " + i;
  i++;
}

BREAK -- 
The break statement "jumps out" of a loop.
CONTINUE
The continue statement "jumps over" one iteration in the loop.

------------------

Iterables : t simply means looping over a sequence of elements.

Iterables are iterable objects (like Arrays).
Iterables can be accessed with simple and efficient code.
Iterables can be iterated over with for..of loops

const letters = ["a","b","c"];

for (const x of letters) {
  // code block to be executed
}
/ a b c 

---------------------- 

Sets 

A JavaScript Set is a collection of unique values.
Each value can only occur once in a Set.

const letters = new Set(["a","b","c"]);

-----------------------

Maps 

A Map holds key-value pairs where the keys can be any datatype.
A Map remembers the original insertion order of the keys.

const fruits = new Map();

fruits.set("apples", 500);
fruits.set("bananas", 300);

fruits.get("apples"); 

fruits.has("apples");
fruits.delete("apples");
fruits.has("apples");

---------------

**

In JavaScript there are 5 different data types that can contain values:

string
number
boolean
object
function

There are 6 types of objects:
Object
Date
Array
String
Number
Boolean

And 2 data types that cannot contain values:
null
undefined


--------------------

Errors / Exception Handling 

The try statement defines a code block to run (to try).

The catch statement defines a code block to handle any error.

The finally statement defines a code block to run regardless of the result.

The throw statement defines a custom error.

