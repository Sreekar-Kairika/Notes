 SCOPE 
 JavaScript has 3 types of scope:

Block scope
Function scope
Global scope

Before ES6 (2015), JavaScript had only Global Scope and Function Scope.
ES6 introduced two important new JavaScript keywords: let and const.
These two keywords provide Block Scope in JavaScript.


Variables declared inside a { } block cannot be accessed from outside the block

Variables declared with the var keyword can NOT have block scope.
Variables declared inside a { } block can be accessed from outside the block.
Example
{
  var x = 2;
}
// x CAN be used here

FunctionalScope:
Variables declared with var, let and const are quite similar when declared inside a function.


GLOBAL SCOPE :
Variables declared Globally (outside any function) have Global Scope.
Global variables can be accessed from anywhere in a JavaScript program.
Variables declared with var, let and const are quite similar when declared outside a block.


Global variables defined with the var keyword belong to the window object:
Example
var carName = "Volvo";
window.carName // used 

Global variables defined with the let keyword do not belong to the window object:
let carName = "Volvo";
window.carName //   cannot be used 


--------------------------

HOISTING 

Hoisting is JavaScript's default behavior of moving declarations to the top.

**
In JavaScript, a variable can be declared after it has been used.
In other words; a variable can be used before it has been declared.


**Variables defined with let and const are hoisted to the top of the block, but not initialized.
The block of code is aware of the variable, but it cannot be used until it has been declared.
Using a let variable before it is declared will result in a ReferenceError


***

var x = 5; // Initialize x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x + " " + y;           // Display x and y
var y = 7; // Initialize y

o/p :: x is 5 
y is undefined 

This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.
Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined.

***

-------- 
STRICT MODE

The purpose of "use strict" is to indicate that the code should be executed in "strict mode
We cannot use the UNDECLARED variables.

"use strict";
let x = 3.14;
delete x;  
// you cannot delete in strict mode 

------------------------

ARROW FUNCTIONS

Arrow functions allow us to write shorter function syntax.

hello = () => { return "Hello World!"}

hello = (name) => { "Hello "+name}

-------------------------

Classes :A JavaScript class is not an object.
It is a template for JavaScript objects.

class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}

//Objcets to class Car 

let myCar1 = new Car("Ford", 2014);
let myCar2 = new Car("Audi", 2019);


--------------------- 
MODULES 

JavaScript modules allow you to break up your code into separate files.
This makes it easier to maintain the code-base.
JavaScript modules rely on the import and export statements.

EX:
const name = "Jesse";
const age = 40;
export {name, age};

import { name, age } from "./person.js";

----------------------------------
JSON 

JSON stands for JavaScript Objcet Notation
JSON is a format for storing and transporting data.


SYNTAX
Data is in name/value pairs
Data is separated by commas
Curly braces hold objects
Square brackets hold arrays


"firstName":"John", "lastName":"Doe"}

"employees":[
  {"firstName":"John", "lastName":"Doe"},
  {"firstName":"Anna", "lastName":"Smith"},
  {"firstName":"Peter", "lastName":"Jones"}
 ]


JSON to JavaScript
const obj = JSON.parse(text)














