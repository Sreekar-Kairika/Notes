 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 -----
 
 @Before Adivice -- logging security 
 Transactional it uses AOP
 Audit logging ---
 
 API Management 
 
 Need to AspectJ jar files , even though we use Spring AOP
 
 
 ------------
 
 Point Cut Expression:: A predicate expression for where advice should be applied
 
 
We start with execution point-cut

Types of 
1) 

 2)Match on method Name
 
 3)Modifiers patterb
  
  4)return type pattern
  
  5)declaring type pattern 
  
  6)Parameter pattern 
  
  
  
@Before("execution(public void add*()))
-- funvtion name startes with add+


public 	void 		add() 
Modifier	return-type	Method

@Before("execution(* * processcard()")
--Any return type & modifier
--- Access Modifier is optional 


@Before("execution(public void   add*()")
// methods starting with add


We return Based on RETURN TYPE ALSO.


 ----
 
 Moudle 37 
 PointCut --  with Parameter Wildcards
 
 
 () -- mathces a method with no arguments
 (*) -- matches a method with one argument of any type
 (..) -- matches a method with 0 or more arguments of any type 
 
 
 
 @Before("execution(* addAccount(com.aopdemo.Account) )")
    public void beforeAddAccountAdvice(){
        System.out.println("Executing @Before Advice method");
    }
    
    Just pass the Class Name 
    
    
Match Objects within our Package 

 @Before("execution(* com.aopdemo.dao.*.*(..) )")
            //Account.class.method(any method)
            
            
----------------

Point Cut Declaration

Re-use a Point cut expression 

Copy pasting it to every method is Not Ideal solution

Easily reuse point cut expression

Update in one  location

Also share & combine Point cut expression 

@Pointcut
    
    
@Pointcut("execution(* com.aopdemo.dao.*.*(..))")
    private void forDaoPackage() {}

    @Before("forDaoPackage()")
    public void beforeAddAccountAdvice()
    {
        System.out.println(" Executing @Before Advice ");
    }
    

::Combine Point Cuts

@Before("expressionOne() && expression2()")
|| -- or

All methods in package except Getters & Setters

----------------------------------

AOP -- ORDERING ASPECTS

We have many @Before advices to be applied

We want to run them in a order 

Add @Order Annotation to the Aspectgs 


Lower Numbers have high precedencs ,, Negative numbers are also allowed


We refactor code of different aspects into different classes
& give them the order. 




